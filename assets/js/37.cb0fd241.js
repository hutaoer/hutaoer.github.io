(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{401:function(e,v,_){"use strict";_.r(v);var a=_(45),n=Object(a.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"npm-学习笔记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#npm-学习笔记"}},[e._v("#")]),e._v(" npm 学习笔记")]),e._v(" "),_("h2",{attrs:{id:"安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),_("ul",[_("li",[e._v("安装"),_("code",[e._v("Node.js")]),e._v("的时候，会连带一起安装"),_("code",[e._v("npm")])]),e._v(" "),_("li",[e._v("安装最新版"),_("code",[e._v("npm")]),e._v(": "),_("code",[e._v("npm install npm@latest -g")])])]),e._v(" "),_("h2",{attrs:{id:"npx"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#npx"}},[e._v("#")]),e._v(" npx")]),e._v(" "),_("ul",[_("li",[e._v("npm 从5.2版开始，增加了 npx 命令。npx 想要解决的主要问题，就是调用项目内部安装的模块。")]),e._v(" "),_("li",[e._v("对于一些全局安装的工具包，比如"),_("code",[e._v("create-react-app")]),e._v("，执行"),_("code",[e._v("npx create-react-app my-react-app")]),e._v("，那么npx执行的逻辑是：将"),_("code",[e._v("create-react-app")]),e._v("下载到临时目录，使用以后再删除；若后面再次执行这个命令，会重新下载"),_("code",[e._v("create-react-app")])])]),e._v(" "),_("h2",{attrs:{id:"全局链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#全局链接"}},[e._v("#")]),e._v(" 全局链接")]),e._v(" "),_("ul",[_("li",[e._v("查看所有全局链接："),_("code",[e._v("npm ls --global --depth 0")])]),e._v(" "),_("li",[e._v("删除某个全局链接："),_("code",[e._v("npm uninstall --global pkg")])])]),e._v(" "),_("h2",{attrs:{id:"npm-link"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#npm-link"}},[e._v("#")]),e._v(" npm link")]),e._v(" "),_("ul",[_("li",[e._v("在一个npm的项目中执行"),_("code",[e._v("npm link")]),e._v("会创建一个全局的"),_("code",[e._v("npm")]),e._v("链接，指向当前执行命令的目录。")]),e._v(" "),_("li",[e._v("链接的名字对应的是"),_("code",[e._v("package.json")]),e._v("中的"),_("code",[e._v("name")]),e._v("，比如叫做："),_("code",[e._v("pkgName")])]),e._v(" "),_("li",[e._v("记得给项目添加"),_("code",[e._v("main")]),e._v("属性，指定主入口。")]),e._v(" "),_("li",[e._v("如果要在其他的项目中使用这个全局链接，则在项目的根目录中执行,"),_("code",[e._v("npm link pkgName")]),e._v("。生成链接后，每次修改代码，都会同步。不需要再做二次链接。")]),e._v(" "),_("li",[e._v("如果测试完成后，务必记得删除"),_("code",[e._v("pkgName")]),e._v("，先在项目中删除模块，执行"),_("code",[e._v("npm unlink pkgName")])]),e._v(" "),_("li",[e._v("然后进入"),_("code",[e._v("pkgName")]),e._v("项目根目录，执行"),_("code",[e._v("npm unlink")])])]),e._v(" "),_("h3",{attrs:{id:"使用模块"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用模块"}},[e._v("#")]),e._v(" 使用模块")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("npm link pkgName")])]),e._v(" "),_("li",[e._v("如果"),_("code",[e._v("pkgName")]),e._v("中指定了"),_("code",[e._v('"main":"index.js"')]),e._v("属性，那么在"),_("code",[e._v("require")]),e._v("的时候，就会去查找"),_("code",[e._v("pkgName/index.js")])]),e._v(" "),_("li",[e._v("如果"),_("code",[e._v("pkgName")]),e._v("的"),_("code",[e._v("package.json")]),e._v("中还使用了"),_("code",[e._v("bin")]),e._v("属性，那么会在本地的"),_("code",[e._v("{prefix}/bin/")]),e._v("下面再建立一个软连接，这样就可以直接在命令行中使用"),_("code",[e._v("bin")]),e._v("配置的属性。")]),e._v(" "),_("li",[e._v("如果"),_("code",[e._v("bin")]),e._v("下面有多个命令，则会在"),_("code",[e._v("{prefix}/bin")]),e._v("下面，生成多个全局的软连接。")]),e._v(" "),_("li",[e._v("如果执行"),_("code",[e._v("bin")]),e._v("下面对应命令提示没有权限的话，需要将"),_("code",[e._v("npm")]),e._v("的"),_("code",[e._v("{prefix}/bin")]),e._v("路径，添加到"),_("code",[e._v("$PATH")]),e._v("中。")]),e._v(" "),_("li",[e._v("例如，你可以在"),_("code",[e._v(".zshrc")]),e._v("中，添加代码："),_("code",[e._v("export PATH={home}/.nvm/versions/node/v12.16.1/bin")]),e._v("。作者本人是使用的"),_("code",[e._v("nvm")]),e._v("管理"),_("code",[e._v("node")]),e._v("，所以"),_("code",[e._v("PATH")]),e._v("可能跟大家的不一样，仅供参考。")])]),e._v(" "),_("h3",{attrs:{id:"注意"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),_("ul",[_("li",[e._v("在"),_("code",[e._v("pkgName")]),e._v("项目中删除的时候，直接"),_("code",[e._v("npm unlink")]),e._v("会删除不掉，错误信息为："),_("code",[e._v("Must provide a package name to remove")]),e._v("。然后又执行"),_("code",[e._v("npm unlink pkgName")]),e._v("，还是删除不掉。后来使用了"),_("code",[e._v("npm unlink pkgName -g")]),e._v("才能删除成功。不知道是不是使用了"),_("code",[e._v("nvm")]),e._v("的关系。如果是使用原生的"),_("code",[e._v("node")]),e._v("安装包安装，可能会不一样。笔者在这里没有做进一步的测试。")]),e._v(" "),_("li",[e._v("测试的"),_("code",[e._v("npm")]),e._v("版本为 "),_("code",[e._v("7.22.0")]),e._v("，这时候，"),_("code",[e._v("{prefix}/lib/node_modules")]),e._v("和"),_("code",[e._v("{prefix}/bin/")]),e._v("下面的软连接都会一起删除掉。")]),e._v(" "),_("li",[e._v("也可以进入到目录下，手动删除："),_("code",[e._v("rm linkName")])])]),e._v(" "),_("h2",{attrs:{id:"npm-install"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#npm-install"}},[e._v("#")]),e._v(" npm install")]),e._v(" "),_("ul",[_("li",[e._v("在项目中执行"),_("code",[e._v("npm install pkgName")]),e._v(", "),_("code",[e._v("pkgName")]),e._v("被安装到当前目录的"),_("code",[e._v("node_modules")]),e._v("子目录；其次，"),_("code",[e._v("node_modules/.bin")]),e._v("目录会生成一个符号链接"),_("code",[e._v("node_modules/.bin/pkgName")]),e._v("，指向"),_("code",[e._v("pkgName")]),e._v("模块的可执行脚本。")]),e._v(" "),_("li",[e._v("安装成功后，就可以在"),_("code",[e._v("package.json")]),e._v("的"),_("code",[e._v("script")]),e._v("属性里面，不带路径的引用"),_("code",[e._v("pkgName")]),e._v("这个脚本。")])]),e._v(" "),_("h3",{attrs:{id:"peerdependency"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#peerdependency"}},[e._v("#")]),e._v(" peerDependency")]),e._v(" "),_("ul",[_("li",[e._v("可以用来避免核心依赖库被重复下载的问题。提示宿主环境去安装满足插件"),_("code",[e._v("peerDependencies")]),e._v("所指定依赖的包。")]),e._v(" "),_("li",[e._v("比如"),_("code",[e._v("antd")]),e._v("就指定了"),_("code",[e._v("peerDependencies")])])]),e._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[e._v("  "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('"peerDependencies"')]),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('"react"')]),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('">=16.9.0"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('"react-dom"')]),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('">=16.9.0"')]),e._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),_("ul",[_("li",[e._v("我在自己的本地项目中显式的安装依赖"),_("code",[e._v('"react": "^17.0.2"')]),e._v("，然后再安装"),_("code",[e._v("antd")])]),e._v(" "),_("li",[e._v("最终在本地项目的"),_("code",[e._v("node_modules")]),e._v('下，安装了"react": "17.0.2"'),_("code",[e._v('和"react-dom": "17.0.2"')])]),e._v(" "),_("li",[e._v("删除"),_("code",[e._v("node_modules")]),e._v("和"),_("code",[e._v("package-lock.json")]),e._v("，先安装"),_("code",[e._v("react@16.0.0")]),e._v("，再安装"),_("code",[e._v("antd")]),e._v("，会提示"),_("code",[e._v("unable to resolve dependency tree")])]),e._v(" "),_("li",[e._v("另外，如果先安装antd，再安装低版本的react，也会提示相应的报错。")])])])}),[],!1,null,null,null);v.default=n.exports}}]);