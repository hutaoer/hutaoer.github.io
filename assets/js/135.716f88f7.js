(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{569:function(t,a,r){"use strict";r.r(a);var s=r(2),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"树形数据存储与设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树形数据存储与设计"}},[t._v("#")]),t._v(" 树形数据存储与设计")]),t._v(" "),a("h2",{attrs:{id:"数据库设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库设计"}},[t._v("#")]),t._v(" 数据库设计")]),t._v(" "),a("ul",[a("li",[t._v("最简单的方式，通过JSON进行存储，优点是易于维护，缺点是不够高效。")]),t._v(" "),a("li",[t._v("数据量比较大的时候，使用关系数据库。"),a("code",[t._v("full id path")]),t._v("，每个节点记录下从根节点到自己的id路径，路径可以使用有意义的单词来表示。")])]),t._v(" "),a("h2",{attrs:{id:"三种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种方式"}},[t._v("#")]),t._v(" 三种方式")]),t._v(" "),a("ul",[a("li",[t._v("路径枚举能够很直观地展示出祖先到后代之间的路径，但同时由于它不能确保引用完整性，使得这个设计非常地脆弱。枚举路径也使得数据的存储变得比较冗余。")]),t._v(" "),a("li",[t._v("嵌套集是一个聪明的解决方案——但可能过于聪明了，它不能确保引用完整性。最好在一个查询性能要求很高而对其他需求要求一般的场合来使用它")]),t._v(" "),a("li",[t._v("闭包表是最通用的设计，它要求一张额外的表来存储关系，使用空间换时间的方案减少操作过程中由冗余的计算所造成的消耗")])]),t._v(" "),a("h2",{attrs:{id:"如何展示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何展示"}},[t._v("#")]),t._v(" 如何展示")]),t._v(" "),a("h3",{attrs:{id:"组件递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件递归"}},[t._v("#")]),t._v(" 组件递归")]),t._v(" "),a("h2",{attrs:{id:"组装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组装"}},[t._v("#")]),t._v(" 组装")]),t._v(" "),a("ul",[a("li",[t._v("现在的后端架构也越来越倾向于读写分离，所以在读的时候，多半不会进行太多的操作，不需要组装整棵树。这种情况下，建议直接把数据返回前端，由前端来组装成整棵树。")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6976453383347503141",target:"_blank",rel:"noopener noreferrer"}},[t._v("评论表设计 - 路径枚举、嵌套集、闭包表"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);