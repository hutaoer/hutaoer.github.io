(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{437:function(t,e,a){"use strict";a.r(e);var v=a(3),r=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-分支管理总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-分支管理总结"}},[t._v("#")]),t._v(" git 分支管理总结")]),t._v(" "),e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("ul",[e("li",[t._v("一般来讲，开发环境可以分为四种类型，分别为：")]),t._v(" "),e("li",[t._v("dev : Development environment，开发环境，用于开发者调试使用。")]),t._v(" "),e("li",[t._v("fat: Feature Acceptance Test environment，功能验收测试环境，用于软件测试者测试使用。")]),t._v(" "),e("li",[t._v("uat: User Acceptance Test environment，用户验收测试环境，用于生产环境下的软件测试者测试使用，也就是常说的预发环境。")]),t._v(" "),e("li",[t._v("grey: 灰度环境，对应可控的小部分生产环境，一般大公司会有灰度发布过程，中小创业公司可以酌情落地。")]),t._v(" "),e("li",[t._v("pro: Production environment，生产环境。")])]),t._v(" "),e("h2",{attrs:{id:"常用分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用分类"}},[t._v("#")]),t._v(" 常用分类")]),t._v(" "),e("ul",[e("li",[t._v("根据现阶段的状况，目前一共配置了三套环境，分别为 dev，fat 和 pro")]),t._v(" "),e("li",[t._v("对应的分支按照环境区分，分为 dev【开发】，fat【测试】，master（用 pro 也可以）【生产】三个分支。")]),t._v(" "),e("li",[t._v("开发分支，用于开发环境功能部署，主要给开发人员联调，自测使用。")]),t._v(" "),e("li",[t._v("测试分支，用于产品、运营、测试及开发同学功能测试、验收、提bug")]),t._v(" "),e("li",[t._v("生产分支，对应正式线上版本。")]),t._v(" "),e("li",[t._v("补充：其实还应该有个预发布分支，现阶段还没有用上。")])]),t._v(" "),e("h2",{attrs:{id:"开发流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发流程"}},[t._v("#")]),t._v(" 开发流程")]),t._v(" "),e("ul",[e("li",[t._v("1.以一个敏捷开发迭代周期为例，从 master 分支新建 feature 分支，比如班车v1.0.0的直播功能迭代，可以命名为 【迭代名称 + 班车版本号】，即：创建分支 feature/live_v1.0.0")]),t._v(" "),e("li",[t._v("2.然后在 feature 分支上完成对应功能开发，联调完成后，提交 feature/live_v1.0.0 到 dev 分支的 merge request，由项目 maintainer 负责 merge ，并进行 dev 分支部署。由前后端开发人员自测功能。\n"),e("ul",[e("li",[t._v("如果v1.0.0班车还有其他的feature，则从 master 再创建一个新的 feature 分支，比如登录功能，可以创建分支： feature/login_v1.0.0")])])]),t._v(" "),e("li",[t._v("3.dev 联调、自测完成后，提交班车相关的 feature 分支到 fat 分支的 merge request，由项目 owner 负责 merge 和 代码 review，并进行 fat 分支部署。通知产品、测试、UI进行测试和验收。如果有bug，则在 feature 分支上进行修改、修复，并重新执行 2、3步骤，直至功能验收通过。")]),t._v(" "),e("li",[e("ol",{attrs:{start:"4"}},[e("li",[t._v("fat 验收通过后，则可认为这个版本的功能测试验收完成，可以直接提 fat 到 master 的 merge request ，由项目 maintainer 来执行。")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"5"}},[e("li",[t._v("将 master 分支部署到生产环境。")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"6"}},[e("li",[t._v("打 tag，并周知项目成员，删除本地、远程冗余分支。")])]),t._v(" "),e("ul",[e("li",[t._v("git tag -d tagName 删除本地tag")]),t._v(" "),e("li",[t._v("git push origin :refs/tags/tagName 删除远程tag")]),t._v(" "),e("li",[t._v("git tag -a v1.x.x -m 'tag 描述' 打tag (tagName 前面记得加v)")]),t._v(" "),e("li",[t._v("git push origin tagName 推送到远程")]),t._v(" "),e("li",[t._v("git remote prune origin  清理无效的远程追踪分支")])])])]),t._v(" "),e("h2",{attrs:{id:"hotfix-流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hotfix-流程"}},[t._v("#")]),t._v(" hotfix 流程")]),t._v(" "),e("ul",[e("li",[t._v("考虑到修复线上问题的紧急性，直接从当前 master 分支创建 hotfix 分支，比如修复直播问题，命名为 hotfix/live。根据情况来判断是否需要经过 fat 环境验证，如果是小问题，可本地测试通过后，直接合并到master，快速修复。")])]),t._v(" "),e("h3",{attrs:{id:"commit-规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-规范"}},[t._v("#")]),t._v(" commit 规范")]),t._v(" "),e("ul",[e("li",[t._v("feat:  增加新功能")]),t._v(" "),e("li",[t._v("fix:  修复bug")]),t._v(" "),e("li",[t._v("docs:  只改动了文档相关的内容")]),t._v(" "),e("li",[t._v("style:  不影响代码含义的改动，例如去掉空格、改变缩进、增删分号")]),t._v(" "),e("li",[t._v("build:  构造工具的或者外部依赖的改动，例如webpack，npm")]),t._v(" "),e("li",[t._v("refactor:  代码重构")])])])}),[],!1,null,null,null);e.default=r.exports}}]);