(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{466:function(t,s,a){"use strict";a.r(s);var r=a(3),n=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" HTTP2")]),t._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("ul",[s("li",[t._v("HTTP/2 的主要目标是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 HTTP 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。")]),t._v(" "),s("li",[t._v("SPDY 引入一个新的 "),s("code",[t._v("二进制分帧")]),t._v(" 层，以实现请求和响应复用、优先级和标头压缩，目的是更有效地利用底层 TCP 连接。它跟"),s("code",[t._v("HTTP/1.X")]),t._v("不兼容。")]),t._v(" "),s("li",[t._v("HTTP 工作组 基于 SPDY 制定了 "),s("code",[t._v("HTTP/2")]),t._v(" 这个标准。与 "),s("code",[t._v("HTTP/1.1")]),t._v(" 相比，"),s("code",[t._v("HTTP/2")]),t._v(" 的主要变化在于性能提升: 例如复用、标头压缩、优先级和协议协商。")])]),t._v(" "),s("h2",{attrs:{id:"二进制分帧层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧层"}},[t._v("#")]),t._v(" 二进制分帧层")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HTTP/2")]),t._v(" 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。")]),t._v(" "),s("li",[s("code",[t._v("HTTP/1.x")]),t._v(" 协议以换行符作为纯文本的分隔符，而 "),s("code",[t._v("HTTP/2")]),t._v(" 将所有传输的信息分割为更小的消息和帧，并采用二进制格式对它们编码。")])]),t._v(" "),s("h2",{attrs:{id:"数据流、消息和帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据流、消息和帧"}},[t._v("#")]),t._v(" 数据流、消息和帧")]),t._v(" "),s("ul",[s("li",[t._v("数据流: 已建立的连接内的双向字节流，可以承载一条或多条消息。")]),t._v(" "),s("li",[t._v("消息: 与逻辑请求或响应消息对应的完整的一系列帧。")]),t._v(" "),s("li",[t._v("帧: HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。")]),t._v(" "),s("li",[t._v("所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流。")]),t._v(" "),s("li",[t._v("每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。")]),t._v(" "),s("li",[t._v("每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。")]),t._v(" "),s("li",[t._v("帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。")])]),t._v(" "),s("h2",{attrs:{id:"请求与响应复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求与响应复用"}},[t._v("#")]),t._v(" 请求与响应复用")]),t._v(" "),s("ul",[s("li",[t._v("在 "),s("code",[t._v("HTTP/1.x")]),t._v(" 中，如果客户端要想发起多个并行请求以提升性能，则必须使用多个 TCP 连接。")]),t._v(" "),s("li",[s("code",[t._v("HTTP2")]),t._v("将 "),s("code",[t._v("HTTP")]),t._v(" 消息分解为独立的帧，交错发送，然后在另一端重新组装。")])]),t._v(" "),s("h2",{attrs:{id:"数据流优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据流优先级"}},[t._v("#")]),t._v(" 数据流优先级")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HTTP/2")]),t._v(" 标准允许每个数据流都有一个关联的权重和依赖关系")])]),t._v(" "),s("h2",{attrs:{id:"每个来源一个连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每个来源一个连接"}},[t._v("#")]),t._v(" 每个来源一个连接")]),t._v(" "),s("ul",[s("li",[t._v("所有 HTTP/2 连接都是永久的，而且仅需要每个来源一个连接。")])]),t._v(" "),s("h2",{attrs:{id:"服务器推送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" 服务器推送")]),t._v(" "),s("ul",[s("li",[t._v("服务器推送是 HTTP/2 协议里面，唯一一个需要开发者自己配置的功能。其他功能都是服务器和浏览器自动实现，不需要开发者关心。")]),t._v(" "),s("li",[t._v("还没有收到浏览器的请求，服务器就把各种资源推送给浏览器。")])]),t._v(" "),s("h3",{attrs:{id:"nginx-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置"}},[t._v("#")]),t._v(" Nginx 配置")]),t._v(" "),s("ul",[s("li",[t._v("访问"),s("code",[t._v("/")]),t._v("目录的时候，推送"),s("code",[t._v("/style.css")]),t._v("，添加"),s("code",[t._v("http2_push")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v(" ssl http2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ssl                      on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssl_certificate          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("etc"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("certs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("crt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssl_certificate_key      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("etc"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("certs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ssl_session_timeout  5m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ssl_ciphers "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HIGH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("aNULL"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MD5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssl_protocols SSLv3 TLSv1 TLSv1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" TLSv1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssl_prefer_server_ciphers   on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    location "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      root   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("share"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      index  index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("htm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      http2_push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("css"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"标头压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标头压缩"}},[t._v("#")]),t._v(" 标头压缩")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HTTP/2")]),t._v(" 使用 HPACK 压缩格式压缩请求和响应标头元数据")])])])}),[],!1,null,null,null);s.default=n.exports}}]);