(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{406:function(t,s,a){"use strict";a.r(s);var r=a(3),n=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"typescript-学习笔记-高级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-学习笔记-高级"}},[t._v("#")]),t._v(" TypeScript 学习笔记 —— 高级")]),t._v(" "),s("h2",{attrs:{id:"泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),s("ul",[s("li",[t._v("Java中泛型的解释：类型参数化，将原来某种具体的类型进行参数化，约束类型成员之间的关系。")]),t._v(" "),s("li",[t._v("我们可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。泛型是指在定义函数、接口或者类时，未指定其参数类型，只有在运行时传入才能确定。那么此时的参数类型就是一个变量，通常用大写字母 T 来表示。")]),t._v(" "),s("li",[t._v("语法：函数名、接口名或者类名添加后缀 "),s("code",[t._v("<T>")])]),t._v(" "),s("li",[t._v("定义多个泛型类型参数，通过逗号来分割，例如："),s("code",[t._v("<T, U, K>。")])]),t._v(" "),s("li",[t._v("调用泛型函数时受泛型约束的参数有传值，泛型参数的入参可以从参数的类型进行推断，而无须显示指定类型。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" fn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyData")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"泛型参数设置默认类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型参数设置默认类型"}},[t._v("#")]),t._v(" 泛型参数设置默认类型")]),t._v(" "),s("ul",[s("li",[t._v("语法："),s("code",[t._v("<T = 默认类型>")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" fn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"泛型类型与泛型接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型类型与泛型接口"}},[t._v("#")]),t._v(" 泛型类型与泛型接口")]),t._v(" "),s("h4",{attrs:{id:"泛型类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型类型"}},[t._v("#")]),t._v(" 泛型类型")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" fn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("fn1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("arg")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("fn2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <T>(arg: T) => T 即为泛型类型，")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于带有调用签名的对象字面量书写方式：{ <T>(arg: T): T }:")]),t._v("\n")])])]),s("h5",{attrs:{id:"分配条件类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配条件类型"}},[t._v("#")]),t._v(" 分配条件类型")]),t._v(" "),s("ul",[s("li",[t._v("在条件类型判断情况下（出现 extends）,如果入参是联合类型，则会被拆解成一个个独立的原子类型进行类型计算。")])]),t._v(" "),s("h4",{attrs:{id:"泛型接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口"}},[t._v("#")]),t._v(" 泛型接口")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("myFn")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 泛型参数当作整个接口的一个参数，我们可以把泛型参数提前到接口名上。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用的时候，需要指定泛型参数的类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("fn1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fn1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("s")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"泛型类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型类"}},[t._v("#")]),t._v(" 泛型类")]),t._v(" "),s("ul",[s("li",[t._v("声明 类 "),s("code",[t._v("MyClass")]),t._v(" 的后面后加上了 "),s("code",[t._v("<T>")]),t._v("，这样就声明了泛型参数 T")])]),t._v(" "),s("h3",{attrs:{id:"泛型约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型约束"}},[t._v("#")]),t._v(" 泛型约束")]),t._v(" "),s("ul",[s("li",[t._v("如果很明确传入的泛型参数是什么类型，或者明确想要操作的某类型的值具有什么属性，那么就需要对泛型进行约束。\n"),s("ul",[s("li",[t._v("让泛型继承一个接口，那么传入的泛型类型就必须包含接口中的成员，从而达到对泛型的约束。")]),t._v(" "),s("li",[t._v("也可以让泛型继承几个类型。")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接口")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" fn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型")]),t._v("\ntype Args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Args")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能传入 Args 的类型")]),t._v("\n")])])]),s("ul",[s("li",[t._v("通过 "),s("code",[t._v("<T extends Interface1 & Interface2>")]),t._v(" 这种语法来实现多重类型的泛型约束")])]),t._v(" "),s("h2",{attrs:{id:"类型兼容性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型兼容性"}},[t._v("#")]),t._v(" 类型兼容性")]),t._v(" "),s("ul",[s("li",[t._v("指的是一个类型能否赋值给其他类型的规则。")]),t._v(" "),s("li",[t._v("TypeScript 类型兼容性是基于结构类型的；结构类型只使用其成员来描述类型。")])]),t._v(" "),s("h3",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("ul",[s("li",[t._v("如果函数 fn2 可以赋值给 fn1 的条件 "),s("code",[t._v("let fn1 = fn2")]),t._v(" "),s("ul",[s("li",[t._v("fn2 的每个参数均能在 fn1 中找到对应类型的参数")]),t._v(" "),s("li",[t._v("参数顺序保持一致，参数类型对应")]),t._v(" "),s("li",[t._v("参数名称不需要相同")])])]),t._v(" "),s("li",[t._v("函数返回值\n"),s("ul",[s("li",[t._v("类型系统强制源函数的返回值类型必须是目标函数返回值类型的子类型")]),t._v(" "),s("li",[t._v("如果目标函数的返回值类型是 void，那么源函数返回值可以是任意类型：")])])])]),t._v(" "),s("h3",{attrs:{id:"枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),s("ul",[s("li",[t._v("枚举与数字类型互相兼容")]),t._v(" "),s("li",[t._v("不同枚举类型之间不兼容。")]),t._v(" "),s("li",[t._v("如果枚举仅有一个字面量成员，则成员的类型就等于枚举类型，可以互相兼容。")])]),t._v(" "),s("h4",{attrs:{id:"数字枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字枚举"}},[t._v("#")]),t._v(" 数字枚举")]),t._v(" "),s("ul",[s("li",[t._v("默认从0开始，要想定义从其他数值开始，则手动赋值(包括负数、小数)，后面的枚举成员值，都会递增加1")])]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WEEK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  monday "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tuesday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("可以给任意的成员变量赋值，但需要注意有+1的规则在，可能会出现值相同的成员。不建议这么做。")]),t._v(" "),s("li",[t._v("两个命名，顺序一致的枚举值，其同名成员值一样，但TS认为它们不相同，也不恒等。")])]),t._v(" "),s("h4",{attrs:{id:"字符串枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串枚举"}},[t._v("#")]),t._v(" 字符串枚举")]),t._v(" "),s("h4",{attrs:{id:"异构枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异构枚举"}},[t._v("#")]),t._v(" 异构枚举")]),t._v(" "),s("ul",[s("li",[t._v("枚举成员同时支持数字和字符类型。使用场景较少")])]),t._v(" "),s("h4",{attrs:{id:"外部枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外部枚举"}},[t._v("#")]),t._v(" 外部枚举")]),t._v(" "),s("ul",[s("li",[t._v("使用"),s("code",[t._v("declare")]),t._v("描述一个在其他地方已经定义过的枚举类型。")]),t._v(" "),s("li",[t._v("外部枚举转译为js代码后，跟常规枚举的区别是，会编译为对外部对象的引用。而不是直接的常量。")])]),t._v(" "),s("h3",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),s("ul",[s("li",[t._v("类分为实例部分和静态部分。比较两个类类型数据时，只有实例成员会被比较，静态成员和构造函数不会比较。")]),t._v(" "),s("li",[t._v("类的私有成员和受保护成员会影响兼容性。")])]),t._v(" "),s("h3",{attrs:{id:"泛型-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型-2"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),s("ul",[s("li",[t._v("泛型的类型兼容性根据其是否被成员使用而不同。")]),t._v(" "),s("li",[t._v("如果泛型参数类型不同，但泛型类型还未使用，则可以相互赋值。如果有使用，则不能赋值。")]),t._v(" "),s("li",[t._v("没有指定泛型类型的泛型参数，会把所有泛型参数当成 any 类型比较，也可以赋值。")])]),t._v(" "),s("h2",{attrs:{id:"交叉类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交叉类型"}},[t._v("#")]),t._v(" 交叉类型")]),t._v(" "),s("ul",[s("li",[t._v("语法："),s("code",[t._v("T & U")])]),t._v(" "),s("li",[t._v("交叉类型是将多个类型合并为一个类型。它包含了所需的所有类型的特性。")]),t._v(" "),s("li",[t._v('如果交叉类型中，有同名属性，且类型不一样，那么它最终的类型就是：never，且不能被赋值。比如，"string & number"，就是一个never类型。')]),t._v(" "),s("li",[t._v("真正有用的地方，是将多个接口进行交叉，实现接口的合并，并可形成接口继承的效果。")]),t._v(" "),s("li",[t._v("如果合并的接口中，有同名类型，是什么效果。取决于同名的属性是否兼容。\n"),s("ul",[s("li",[t._v("同名属性类型兼容。则合并后的类型，为两个类型的子类型。")]),t._v(" "),s("li",[t._v("同名属性类型不兼容。合并后的类型，就是不同类型进行交叉。")])])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" number\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ab")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'333'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错ts(2322)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n 只能赋值33")]),t._v("\n")])])]),s("h2",{attrs:{id:"联合类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[t._v("#")]),t._v(" 联合类型")]),t._v(" "),s("ul",[s("li",[t._v("如果一个值是联合类型，那么只能访问联合类型的共有属性或方法。")]),t._v(" "),s("li",[t._v("交叉联合类型，相当于对交叉的联合类型取交集。如果交叉的两个联合类型，没有交集，则相当于never类型。")]),t._v(" "),s("li",[t._v("string原始类型和string字面量类型联合，则"),s("code",[t._v("类型缩减")]),t._v("为原始类型。对于number,boolean也一样。")]),t._v(" "),s("li",[t._v("如果要让缩减类型被控制，且在IDE中进行提示，给父类型添加"),s("code",[t._v("& {}")]),t._v("即可，字面量就会被保留。")]),t._v(" "),s("li",[t._v("联合类型的缩减规则是什么？")])]),t._v(" "),s("h2",{attrs:{id:"联合、交叉组合的优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联合、交叉组合的优先级"}},[t._v("#")]),t._v(" 联合、交叉组合的优先级")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("|,&")]),t._v("的优先级类似于js中的"),s("code",[t._v("||,&&")])]),t._v(" "),s("li",[t._v("且满足交换律和分配律")])]),t._v(" "),s("h2",{attrs:{id:"类型别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[t._v("#")]),t._v(" 类型别名")]),t._v(" "),s("ul",[s("li",[t._v("使用"),s("code",[t._v("type")]),t._v("语法")]),t._v(" "),s("li",[t._v("与接口的区别\n"),s("ul",[s("li",[t._v("接口可以实现 extends 和 implements，类型别名不行。")]),t._v(" "),s("li",[t._v("类型别名并不会创建新类型，是对原有类型的引用，而接口会定义一个新类型。")]),t._v(" "),s("li",[t._v("接口只能用于定义对象类型，而类型别名的声明方式除了对象之外还可以定义交叉、联合、原始类型等。")]),t._v(" "),s("li",[t._v("相同的接口声明可以合并")])])]),t._v(" "),s("li",[t._v("TypeScript 推荐我们尽可能的使用接口来规范我们的代码。")]),t._v(" "),s("li",[t._v("类型别名在定义交叉类型、联合类型。")])]),t._v(" "),s("h2",{attrs:{id:"类型守卫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型守卫"}},[t._v("#")]),t._v(" 类型守卫")]),t._v(" "),s("h3",{attrs:{id:"区分联合类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区分联合类型"}},[t._v("#")]),t._v(" 区分联合类型")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("switch，if else")]),t._v(":处理联合类型或类型成员可枚举场景，或字面量恒等场景。")]),t._v(" "),s("li",[t._v("字面量恒等，同上。")]),t._v(" "),s("li",[s("code",[t._v("typeof")]),t._v("：联合类型成员不可枚举，如字符串，数字等原子类型组成的组合。")]),t._v(" "),s("li",[s("code",[t._v("instanceof")]),t._v("：联合类型的成员为类的时候。")]),t._v(" "),s("li",[s("code",[t._v("in")]),t._v("：联合类型成员包含接口类型，且接口之间属性不同。")]),t._v(" "),s("li",[t._v("自定义类型守卫：封装一个谓词函数。")])]),t._v(" "),s("h3",{attrs:{id:"区别枚举类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别枚举类型"}},[t._v("#")]),t._v(" 区别枚举类型")]),t._v(" "),s("h3",{attrs:{id:"失效的类型守卫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#失效的类型守卫"}},[t._v("#")]),t._v(" 失效的类型守卫")]),t._v(" "),s("ul",[s("li",[t._v("即不能缩小类型范围的类型守卫，如下所示：")])]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" getName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Cat"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wangwang'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wangwang\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("miaomiao\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("需要改成"),s("code",[t._v("instanceof")]),t._v("或自定义谓词函数类判断。")])]),t._v(" "),s("h3",{attrs:{id:"思考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[t._v("#")]),t._v(" 思考")]),t._v(" "),s("ul",[s("li",[t._v("如何区分不同的接口类型？\n"),s("ul",[s("li",[t._v("使用联合类型")]),t._v(" "),s("li",[t._v("使用自定义类型，通过 is 来声明。")]),t._v(" "),s("li",[t._v("参考：https://cloud.tencent.com/developer/ask/sof/111097")])])])]),t._v(" "),s("h2",{attrs:{id:"索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),s("ul",[s("li",[t._v("索引类型可以让 TypeScript 编译器覆盖检测到使用了动态属性名的代码。")])]),t._v(" "),s("h3",{attrs:{id:"查询操作符-keyof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询操作符-keyof"}},[t._v("#")]),t._v(" 查询操作符：keyof")]),t._v(" "),s("ul",[s("li",[t._v("对于任何类型 T，"),s("code",[t._v("keyof T")]),t._v(" 的结果为 T 上已知的公共属性名的联合。")])]),t._v(" "),s("h3",{attrs:{id:"索引访问操作符-t-k"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引访问操作符-t-k"}},[t._v("#")]),t._v(" 索引访问操作符 - T[K]")]),t._v(" "),s("ul",[s("li",[t._v("一个对象的类型为泛型 T，这个对象的属性类型 K 只需要满足 K extends keyof T，即可得到这个属性值的类型为 "),s("code",[t._v("T[K]")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" getProperty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("keyof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"映射类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#映射类型"}},[t._v("#")]),t._v(" 映射类型")]),t._v(" "),s("ul",[s("li",[t._v("属于工具类型。映射类型可以将已知类型的每个属性都变为可选的或者只读的。")]),t._v(" "),s("li",[t._v("关键字："),s("code",[t._v("Portial")]),t._v("、"),s("code",[t._v("Readonly")])]),t._v(" "),s("li",[t._v("映射类型的语法: "),s("code",[t._v("[K in Keys]")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ntype PersonOptional "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Partial"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Person"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\ntype PersonReadonly "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Readonly"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Person"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源码实现")]),t._v("\ntype Readonly"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  readonly "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" keyof "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 映射类型的语法 [K in Keys]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ntype Partial"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" keyof "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"条件类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件类型"}},[t._v("#")]),t._v(" 条件类型")]),t._v(" "),s("ul",[s("li",[t._v("内置的工具类型。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Exclude"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 T 中剔除可以赋值给 U 的类型。")]),t._v("\nExtract"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提取 T 中可以赋值给 U 的类型。")]),t._v("\nNonNullable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 T 中剔除 null 和 undefined。")]),t._v("\nReturnType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取函数返回值类型。")]),t._v("\nInstanceType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取构造函数类型的实例类型。")]),t._v("\n")])])]),s("h2",{attrs:{id:"is-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#is-关键字"}},[t._v("#")]),t._v(" is 关键字")]),t._v(" "),s("ul",[s("li",[t._v("被称为类型谓词，用来判断一个变量属于某个接口或类型。")]),t._v(" "),s("li",[s("code",[t._v("is")]),t._v(" 关键字一般用于函数返回值类型中，判断参数是否属于某一类型，并根据结果返回对应的布尔类型。")]),t._v(" "),s("li",[t._v("场景：对"),s("code",[t._v("unknown")]),t._v("类型的数据进行判断。"),s("code",[t._v("is")]),t._v(' 关键字经常用来封装"类型判断函数"，通过和函数返回值的比较，从而缩小参数的类型范围，所以类型谓词 '),s("code",[t._v("is")]),t._v("也是一种类型保护。")]),t._v(" "),s("li",[t._v("语法："),s("code",[t._v("prop is type")])]),t._v(" "),s("li",[t._v("函数嵌套后， TypeScript 不能进行正确的类型判断。")]),t._v(" "),s("li",[t._v("常见类型判断函数")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isNumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" unknown"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val is "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" unknown"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val is "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isSymbol "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" unknown"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val is "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("symbol")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'symbol'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isFunction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" unknown"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val is "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" unknown"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val is "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" isPromise"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" any"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" unknown"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val is Promise"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("then"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("catch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"infer-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#infer-关键字"}},[t._v("#")]),t._v(" infer 关键字")]),t._v(" "),s("ul",[s("li",[t._v("声明一个不确定的类型变量。"),s("code",[t._v("infer R")]),t._v(" 就是声明了一个类型变量 "),s("code",[t._v("R")])]),t._v(" "),s("li",[t._v("在条件类型表达式中，可以在 "),s("code",[t._v("extends")]),t._v(" 条件语句中使用 "),s("code",[t._v("infer")]),t._v(" 关键字来声明一个待推断的类型变量。")]),t._v(" "),s("li",[s("code",[t._v("infer")]),t._v("的作用是让 TypeScript 自己推断，并将推断的结果存储到一个类型变量中，"),s("code",[t._v("infer")]),t._v(" 只能用于 "),s("code",[t._v("extends")]),t._v(" 语句中。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("type ReturnType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ang"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" infer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any\n\n")])])]),s("ul",[s("li",[t._v("如果"),s("code",[t._v("T")]),t._v(" 满足某个约束条件，那么就返回这个类型变量，并存储在"),s("code",[t._v("infer U")]),t._v(" 后面的的 "),s("code",[t._v("U")]),t._v(" 中。")]),t._v(" "),s("li",[t._v("借助条件类型的 infer 关键字来推断类型，可以实现一些比如联合类型转交叉类型、联合类型转元组的操作")])]),t._v(" "),s("h2",{attrs:{id:"iterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator"}},[t._v("#")]),t._v(" iterator")]),t._v(" "),s("ul",[s("li",[t._v("可迭代协议：允许 JavaScript 对象定义或定制它们的迭代行为。要成为可迭代对象， 一个对象必须实现 @@iterator 方法。可通过常量 Symbol.iterator 访问该属性。")]),t._v(" "),s("li",[t._v("迭代器协议:\n"),s("ul",[s("li",[t._v("定义了产生一系列值（无论是有限个还是无限个）的标准方式。当值为有限个时，所有的值都被迭代完毕后，则会返回一个默认返回值。")]),t._v(" "),s("li",[t._v("只有实现了一个拥有以下语义（semantic）的 next() 方法，一个对象才能成为迭代器。")]),t._v(" "),s("li",[t._v("next() 方法的返回值类型是 { value: any, done: boolean }。其中，value 是 any 类型，表示下一个将要返回的值；done 是布尔类型，当没有更多可返回数据时返回 true。迭代器还会保存一个内部指针，用来指向当前集合中值的位置。")])])])]),t._v(" "),s("h3",{attrs:{id:"for-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[t._v("#")]),t._v(" for...of")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("for...of")]),t._v(" 会遍历可迭代的对象(包括 "),s("code",[t._v("Array，Map，Set，String，TypedArray，arguments")]),t._v(" 对象等等)，调用对象上的 "),s("code",[t._v("Symbol.iterator")]),t._v(" 方法。")]),t._v(" "),s("li",[s("code",[t._v("for...of")]),t._v(" 语句遍历可迭代对象定义要迭代的数据。")]),t._v(" "),s("li",[s("code",[t._v("for...in")]),t._v(" 语句以任意顺序迭代对象的可枚举属性。")])]),t._v(" "),s("h2",{attrs:{id:"生成器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[t._v("#")]),t._v(" 生成器")]),t._v(" "),s("ul",[s("li",[t._v("生成器函数会返回一个对象，可以调用这个对象上的 next() 方法。")]),t._v(" "),s("li",[t._v("在调用 next() 的时候可以传递一个参数，在上次 yield 前接收到这个参数：")]),t._v(" "),s("li",[t._v("生成器最初没有产生任何结果，在第一次调用 next() 时传参是无意义的。")])]),t._v(" "),s("h2",{attrs:{id:"装饰器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),s("ul",[s("li",[t._v("装饰器是一种特殊类型的声明，它能够附加到类声明、方法、访问符、属性、类方法的参数上，以达到扩展类的行为。")]),t._v(" "),s("li",[t._v("常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器。")]),t._v(" "),s("li",[t._v("装饰器的写法：普通装饰器（无法传参）、 装饰器工厂（可传参）。")]),t._v(" "),s("li",[t._v("执行顺序：先执行装饰器函数，再执行被装饰的函数。")]),t._v(" "),s("li",[t._v("类装饰器函数表达式将构造函数作为唯一的参数，主要用于扩展类的属性和方法。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);