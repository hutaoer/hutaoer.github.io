(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{609:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-编码规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-编码规范"}},[t._v("#")]),t._v(" react 编码规范")]),t._v(" "),a("h2",{attrs:{id:"不要使用数组的索引作为-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要使用数组的索引作为-key"}},[t._v("#")]),t._v(" 不要使用数组的索引作为 key")]),t._v(" "),a("ul",[a("li",[t._v("数组渲染的时候，用索引作为 key，那么数组元素顺序调换后，数组的渲染 DOM 结构不变。")]),t._v(" "),a("li",[t._v("在以下几种情况下可以安全的使用 index 作为索引。\n"),a("ul",[a("li",[t._v("列表不被计算和改变。")]),t._v(" "),a("li",[t._v("列表项没有 ID 属性")]),t._v(" "),a("li",[t._v("列表不会执行重排或筛选操作")])])])]),t._v(" "),a("h2",{attrs:{id:"useeffect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[t._v("#")]),t._v(" useEffect")]),t._v(" "),a("ul",[a("li",[t._v("数据获取，设置订阅或者手动直接更改 React 组件中的 DOM 都属于副作用。")]),t._v(" "),a("li",[t._v("useEffect Hook 视作 componentDidMount、componentDidUpdate 和 componentWillUnmount 的组合体。")]),t._v(" "),a("li",[t._v("每次 render 都会执行"),a("code",[t._v("useEffect")]),t._v("，effect 会针对每个 render 运行而不仅仅是一次，这就是 React 在下次运行 effect 之前还清除前一个 render effect 的原因。")]),t._v(" "),a("li",[t._v("通过 useEffect，能够将之前在两个生命周期中的内容整合到一个 function 中。")])]),t._v(" "),a("h3",{attrs:{id:"需要清理的副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要清理的副作用"}},[t._v("#")]),t._v(" 需要清理的副作用")]),t._v(" "),a("ul",[a("li",[t._v("为什么从 effect 中返回一个 function？这是 effect 可选的清理机制。每个 effect 都可以返回一个在它之后清理的 function。这使得我们能够保持添加订阅和删除订阅彼此接近的订阅的逻辑。这同样是 effect 的一部分。")]),t._v(" "),a("li",[t._v("当组件卸载的时候，React 会执行清理工作。")]),t._v(" "),a("li",[t._v("如果你习惯了使用 class 组件，你可能想知道为什么每次 re-render 之后，effect 的清理都会执行，而不是在卸载过程中只执行一次（打断点就能知道）。")]),t._v(" "),a("li")]),t._v(" "),a("h3",{attrs:{id:"不需要清理的副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不需要清理的副作用"}},[t._v("#")]),t._v(" 不需要清理的副作用")]),t._v(" "),a("ul",[a("li",[t._v("什么时候调用"),a("code",[t._v("useEffect")]),t._v("?")])]),t._v(" "),a("h3",{attrs:{id:"effect-优化性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#effect-优化性能"}},[t._v("#")]),t._v(" effect 优化性能")]),t._v(" "),a("ul",[a("li",[t._v("在某些情况下，每次 render 后清理或者使用 effect 可能会产生性能问题。在类组件中，可以通过 componentDidUpdate 中编写 prevProps 或 prevState 的额外比较来解决这个问题：")]),t._v(" "),a("li",[t._v("这种方式已经被内置到 useEffect Hook 的 API 中，如果在重新渲染之间没有更新某些值，则可以告诉 React 跳过 effect，为了实现这种方式，需要将数组作为可选的第二个参数传递给 useEffect：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("You clicked ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" times")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有在 count 发生变化的时候才会执行这个 effect")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果数组中有多个项目，只要有一个的比较值是不相同的， React 也会执行这个 effect。")]),t._v(" "),a("li",[t._v("如果要运行效果并且仅将其清理一次（在 mount 和 unmount 的时候），可以把空数组 [] 作为第二个参数传递。这告诉 React 你的效果不依赖于来自 props 或 state 的任何值，所以它永远不需要重新运行。这不会作为特殊情况进行处理 - 它直接遵循输入数组的工作方式。虽然传递 [] 更接近 componentDidMount 和 componentWillUnmount 的模式，但是不建议将其作为一种习惯，如果存在订阅的话，经常会导致错误。")])]),t._v(" "),a("h3",{attrs:{id:"async-await-写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await-写法"}},[t._v("#")]),t._v(" async, await 写法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.reddit.com/r/reactjs.json"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" json "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("json")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPosts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n")])])]),a("h3",{attrs:{id:"用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),a("ul",[a("li",[t._v("可以用于很多事情，从设置订阅到创建和清理计时器，再到更改 ref 的值。")])]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.ptbird.cn/react-hoot-useEffect.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("React Hook：使用 useEffect"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[t._v("阅读总结：")]),t._v(" "),a("li",[t._v("useEffect 整合了 class 写法的生命周期函数，包括："),a("code",[t._v("componentWillMount, componentDidMount, componentDidUpdate, componentWillUnmount")])]),t._v(" "),a("li",[t._v("useEffect，默认每次都会执行，后一次的 render 会执行前一次 render 的清理方法后，再执行。如果只想执行一次，传参空数组"),a("code",[t._v("[]")])]),t._v(" "),a("li",[t._v("不需要手动做优化，默认对比数组中的每个 key 值的变化，任意一个值不同，就执行一次 render 方法。")]),t._v(" "),a("li",[t._v("如果有一些监听的方法，需要在清理方法中解绑，否则会有内存泄漏。")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/53077376",target:"_blank",rel:"noopener noreferrer"}},[t._v("useEffect 与 useLayoutEffect"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);