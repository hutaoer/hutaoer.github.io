(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{397:function(t,a,e){"use strict";e.r(a);var s=e(45),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"mutationobserver-学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver-学习"}},[t._v("#")]),t._v(" MutationObserver 学习")]),t._v(" "),e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("mutation")]),t._v("有转变、突变的意思，根据字面意思理解，"),e("code",[t._v("MutationObserver")]),t._v("就是变化的监听者。")]),t._v(" "),e("li",[e("code",[t._v("MutationObserver")]),t._v(" 是一个现代浏览器提供的 Web API，用于检测 DOM 的变化。通过这个 API，我们可以监听 "),e("code",[t._v("DOM")]),t._v(" 的任何变化，比如节点的增加、减少、属性的变动、文本内容的变动等等。")]),t._v(" "),e("li",[t._v("它用来替换掉在 "),e("code",[t._v("DOM 3")]),t._v(" 事件规范中引入的"),e("code",[t._v("Mutation events")]),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("h3",{attrs:{id:"创建-mutationobserver-实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-mutationobserver-实例"}},[t._v("#")]),t._v(" 创建 "),e("code",[t._v("MutationObserver")]),t._v(" 实例")]),t._v(" "),e("ul",[e("li",[t._v("通过传入一个函数来创建一个 "),e("code",[t._v("MutationObserver")]),t._v(" 实例，每当有变化发生，这个函数将会被调用。函数的第一个参数是一个批次内所有的变化"),e("code",[t._v("（mutation）")]),t._v("的集合。")]),t._v(" "),e("li",[t._v("语法："),e("code",[t._v("const observer = new MutationObserver(callback);")]),t._v("，"),e("code",[t._v("callback")]),t._v("包含两个参数：一个是描述所有被触发改动的 "),e("code",[t._v("MutationRecord")]),t._v(" 对象数组，另一个是调用该函数的 "),e("code",[t._v("MutationObserver")]),t._v(" 对象。")]),t._v(" "),e("li",[t._v("示例如下：")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mutationObserver "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MutationObserver")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("mutations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" observer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tmutations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("mutation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"mutaionrecord"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mutaionrecord"}},[t._v("#")]),t._v(" MutaionRecord")]),t._v(" "),e("ul",[e("li",[t._v("每次 dom 变动都会触发通知，合理利用 MutationRecord 进行条件判断，避免执行不必要的 callback 操作。")]),t._v(" "),e("li",[t._v("常见的有以下几种类型：\n"),e("ul",[e("li",[e("code",[t._v("type")]),t._v(": 根据变动类型的不同，取值："),e("code",[t._v("attributes|characterData|childList")])]),t._v(" "),e("li",[e("code",[t._v("target")]),t._v(": 触发通知的DOM节点")]),t._v(" "),e("li",[e("code",[t._v("addedNodes")]),t._v(": 被添加的节点")]),t._v(" "),e("li",[e("code",[t._v("removedNodes")]),t._v(": 被删除的节点")])])])]),t._v(" "),e("h3",{attrs:{id:"实例对象方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例对象方法"}},[t._v("#")]),t._v(" 实例对象方法")]),t._v(" "),e("ul",[e("li",[t._v("创建的实例对象有三个方法：\n"),e("ul",[e("li",[e("code",[t._v("observe")]),t._v(":开始监听，接收两个参数：1. 观察的DOM；2. 配置监听的信息")]),t._v(" "),e("li",[e("code",[t._v("disconnect")]),t._v(": 停止监听。阻止 MutationObserver 实例继续接收通知，除非再次调用其 observe() 方法，否则该观察者对象包含的回调函数都不会再被调用。")]),t._v(" "),e("li",[e("code",[t._v("takeRecords")]),t._v(": 返回已检测到但尚未由观察者的回调函数处理的所有匹配 DOM 更改的列表，使变更队列保持为空。")])])]),t._v(" "),e("li",[t._v("监听元素 "),e("code",[t._v("targetNode")]),t._v(" 的变化：")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("mutationObserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tattributes"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tchildList"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tsubtree"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("停止对变化的监听: "),e("code",[t._v("mutationObserver.disconnect()")])])]),t._v(" "),e("h3",{attrs:{id:"mutationobserver-配置信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver-配置信息"}},[t._v("#")]),t._v(" MutationObserver 配置信息")]),t._v(" "),e("ul",[e("li",[t._v("用来确定需要观察节点的具体行为。")]),t._v(" "),e("li",[t._v("常见的有以下几种：\n"),e("ul",[e("li",[e("code",[t._v("childList")]),t._v(": 观察子节点的变动，默认值"),e("code",[t._v("false")])]),t._v(" "),e("li",[e("code",[t._v("subtree")]),t._v(": 观察所有后代节点变动，默认值"),e("code",[t._v("false")])]),t._v(" "),e("li",[e("code",[t._v("attributes")]),t._v(": 观察属性的变动，默认值"),e("code",[t._v("false")])]),t._v(" "),e("li",[e("code",[t._v("characterData")]),t._v(": 字符数据变化")])])])]),t._v(" "),e("h2",{attrs:{id:"对比-mutation-events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对比-mutation-events"}},[t._v("#")]),t._v(" 对比 "),e("code",[t._v("Mutation events")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Mutation events")]),t._v(" 是同步触发的，每次变动都会触发一次调用。")]),t._v(" "),e("li",[e("code",[t._v("MutationObserver API")]),t._v(" 是异步触发的， DOM 的变动并不会马上触发，而是要等到当前所有 DOM 操作都结束才触发。所以 "),e("code",[t._v("MutationObserver")]),t._v(" 相比 "),e("code",[t._v("Mutation events")]),t._v(" 性能要更高。")]),t._v(" "),e("li",[e("code",[t._v("Mutation events")]),t._v("会被逐步废弃掉。")])]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1684756",target:"_blank",rel:"noopener noreferrer"}},[t._v("你不知道的 MutationObserver"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);